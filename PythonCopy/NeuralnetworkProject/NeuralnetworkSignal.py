
# -*- coding:utf-8 -*-
#編集環境ををutf-8にする

#######################################################################################
# ProjectName   : ニューロラルネットワーク信号伝達プログラム
# FileName      : NeuralnetworkSignal.py
# Name          : 木村雅椰
# Year,month,day: 2017,03,06
#
#comment        :
#
#######################################################################################

#######################################################################################
# import
#######################################################################################
import numpy as np
import time
import SigmoidFunction as F
import sys          #システムパラメータpackage
#######################################################################################

#######################################################################################
# define
#######################################################################################
#MAX_NUMBER = 5
#######################################################################################

#######################################################################################
# Class
#######################################################################################

#######################################################################################
# GlobalVariable
#######################################################################################

#######################################################################################
# 関数名 : identity_function(x)
# 返り値 : x
# 説明　 : 恒等関数(入力をそのまま出力する関数)
#
#######################################################################################
def Identity_function(x):
    return x

#######################################################################################
# 関数名 : main()
# 返り値 : なし
# 説明　 : main関数
#
#######################################################################################
def main():

    #第一層
    X = np.array([1.0,0.5])
    W1 = np.array([[0.1,0.3,0.5],[0.2,0.4,0.6]])
    B1 = np.array([0.1,0.2,0.3])

    print(str(W1.shape))
    print(str(X.shape))
    print(str(B1.shape))

    A1 = np.dot(X,W1) + B1      #ニューロラルネットワークの内積計算(重み付き和の式)

    print(str(A1))
    Z1 = F.sigmoid(A1)
    print(str(Z1))

    #第二層計算へ
    W2 = np.array([[0.1,0.4],[0.2,0.5],[0.3,0.6]])
    B2 = np.array([0.1,0.2])

    print(str(Z1.shape))
    print(str(W2.shape))
    print(str(B2.shape))

    A2 = np.dot(Z1,W2)+B2
    Z2 = F.sigmoid(A2)

    print(str(A2))
    print(str(Z2))
    
    
    
    time.sleep(10)
    return 0

#######################################################################################
if __name__ == "__main__":
        sys.exit(main())
