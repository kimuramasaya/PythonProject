
# -*- coding:utf-8 -*-
#編集環境ををutf-8にする

#######################################################################################
# ProjectName   : 簡易パーセプトロンプログラム
# FileName      : Perceptron_Easy.py
# Name          : 木村雅椰
# Year,month,day: 2017,03,03
#
#comment        : 簡易的なパーセプトロンの実装
#
#######################################################################################

#######################################################################################
# import
#######################################################################################
import numpy as np
import time
import sys          #システムパラメータpackage
#######################################################################################

#######################################################################################
# define
#######################################################################################
#MAX_NUMBER = 5
#######################################################################################

#######################################################################################
# Class
#######################################################################################

#######################################################################################
# GlobalVariable
#######################################################################################

#######################################################################################
# 関数名 : And(x1,x2)
# 返り値 : 整数 : True , False | エラー : -1
# 説明　 : AND関数パーセプトロンAND回路計算簡易版
#
#######################################################################################
def And(x1,x2):
    w1,w2,theta = 0.5,0.5,0.7
    tmp = x1 * w1 + x2 * w2
    if tmp <= theta:
        return 0
    else:
        return 1

#######################################################################################
# 関数名 : P_And(x1,x2)
# 返り値 : 整数 : True , False | エラー : -1
# 説明　 : P_AND関数パーセプトロンAND回路計算、重みとバイアスが含まれる
#
#######################################################################################
def P_And(x1,x2):
    x = np.array([x1,x2])    #入力値
    w = np.array([0.5,0.5])  #重み
    b = -0.7                 #バイアス
    tmp = np.sum(w*x)+b
    if tmp <= 0:
        return 0
    else:
        return 1
    
#######################################################################################
# 関数名 : P_Nand(x1,x2)
# 返り値 : 整数 : True , False
# 説明　 : P_Nand関数パーセプトロンAND回路計算、重みとバイアスが含まれる
#
#######################################################################################
def P_Nand(x1,x2):
    x = np.array([x1,x2])
    w = np.array([-0.5,-0.5])#重みとバイアスだけANDと違う
    b = 0.7
    tmp = np.sum(w*x) + b
    if tmp <= 0:
        return 0
    else :
        return 1

#######################################################################################
# 関数名 : P_OR(x1,x2)
# 返り値 : 整数 : True , False
# 説明　 : Nand関数パーセプトロンAND回路計算、重みとバイアスが含まれる
#
#######################################################################################
def P_Or(x1,x2):
    x = np.array([x1,x2])
    w = np.array([0.5,0.5])
    b = -0.2
    tmp = np.sum(w*x)+b
    if tmp <= 0:
        return 0
    else:
        return 1

#######################################################################################
# 関数名 : P_XOR(x1,x2)
# 返り値 : y
# 説明　 : 回路を組み合わせてXOR出力
#
#######################################################################################
def P_Xor(x1,x2):
    s1 = P_Nand(x1,x2)
    s2 = P_Or(x1,x2)
    y = P_And(s1,s2)
    return y

    
#######################################################################################
# 関数名 : main()
# 返り値 : なし
# 説明　 : main関数
#
#######################################################################################
def main():
    print( "AND" )
    print( "0 : 0 = " + str(P_And(0,0)))
    print( "1 : 0 = " + str(P_And(1,0)))
    print( "0 : 1 = " + str(P_And(0,1)))
    print( "1 : 1 = " + str(P_And(1,1)))

    print("XOR")
    print( "0 : 0 = " + str(P_Xor(0,0)))
    print( "1 : 0 = " + str(P_Xor(1,0)))
    print( "0 : 1 = " + str(P_Xor(0,1)))
    print( "1 : 1 = " + str(P_Xor(1,1)))

    print("OR")
    print( "0 : 0 = " + str(P_Or(0,0)))
    print( "1 : 0 = " + str(P_Or(1,0)))
    print( "0 : 1 = " + str(P_Or(0,1)))
    print( "1 : 1 = " + str(P_Or(1,1)))

    print("NAND")
    print( "0 : 0 = " + str(P_Nand(0,0)))
    print( "1 : 0 = " + str(P_Nand(1,0)))
    print( "0 : 1 = " + str(P_Nand(0,1)))
    print( "1 : 1 = " + str(P_Nand(1,1)))
    time.sleep(10)
    return 0

#######################################################################################
if __name__ == "__main__":
        sys.exit(main())
